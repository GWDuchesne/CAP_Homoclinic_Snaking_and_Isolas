# ===============================================================
# Function computing the bounds Y‚ÇÄ, Z‚ÇÄ, Z‚ÇÅ and Z‚ÇÇ and radius r‚ÇÄ
# ===============================================================
function Bounds_Final_v2!(X_grid::Vector{<:Sequence},Œ∑_grid::Vector{<:Sequence},N::Int64 ,Œ∫::Int64,Œæ‚ÇÅ·µè::ComplexF64,Œæ‚ÇÇ·µè::ComplexF64,star::Union{Vector,Int64},length·µ•::Float64,M‚ÇÅ::Array,M‚ÇÇ::Array, ŒΩ·µß::Interval{Float64}, ŒΩ·µ•::Interval{Float64}, ŒΩ_w::Interval{Float64}, ŒΩ‚Çê::Interval{Float64}, ŒΩ‚Çö::Interval{Float64}  )

# ====================================================================================
# norms
# ====================================================================================
Œ± = real(component(X_grid[1],1))[1]
Œ≥,Œª,v,w,L,Œ∏‚ÇÄ,œÉ,a,œâ,eigenpairs,p = x2var!(component(X_grid[1],2:29))
Œ∑ = Œ∑_grid[1]

ùëø = NormedCartesianSpace( ( ‚Ñì‚àû(), 
                            ‚Ñì¬π(GeometricWeight(ŒΩ·µß)), ‚Ñì¬π(GeometricWeight(ŒΩ·µß)),‚Ñì¬π(GeometricWeight(ŒΩ·µß)),‚Ñì¬π(GeometricWeight(ŒΩ·µß)),
                            ‚Ñì‚àû(), ‚Ñì¬π(GeometricWeight(ŒΩ·µ•)), ‚Ñì¬π(GeometricWeight(ŒΩ·µ•)),‚Ñì¬π(GeometricWeight(ŒΩ·µ•)),‚Ñì¬π(GeometricWeight(ŒΩ·µ•)),
                            ‚Ñì¬π(GeometricWeight(ŒΩ_w)), ‚Ñì¬π(GeometricWeight(ŒΩ_w)),‚Ñì¬π(GeometricWeight(ŒΩ_w)),‚Ñì¬π(GeometricWeight(ŒΩ_w)),
                            ‚Ñì‚àû(), ‚Ñì‚àû(),‚Ñì‚àû(), ‚Ñì‚àû(), ‚Ñì‚àû(),
                            ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê)), ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê)),‚Ñì¬π(GeometricWeight(ŒΩ‚Çê)),‚Ñì¬π(GeometricWeight(ŒΩ‚Çê)),
                            ‚Ñì‚àû(), 
                            ‚Ñì‚àû(), 
                            ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö)), ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö)),‚Ñì¬π(GeometricWeight(ŒΩ‚Çö)),‚Ñì¬π(GeometricWeight(ŒΩ‚Çö)),
                            )  , ‚Ñì‚àû())

ùíÄ = NormedCartesianSpace( ( ‚Ñì‚àû(), 
                            ‚Ñì¬π(GeometricWeight(ŒΩ·µß)), ‚Ñì¬π(GeometricWeight(ŒΩ·µß)),‚Ñì¬π(GeometricWeight(ŒΩ·µß)),‚Ñì¬π(GeometricWeight(ŒΩ·µß)),
                            ‚Ñì‚àû(), ‚Ñì¬π(GeometricWeight(ŒΩ·µ•)), ‚Ñì¬π(GeometricWeight(ŒΩ·µ•)),‚Ñì¬π(GeometricWeight(ŒΩ·µ•)),‚Ñì¬π(GeometricWeight(ŒΩ·µ•)),
                            ‚Ñì¬π(GeometricWeight(ŒΩ_w)), ‚Ñì¬π(GeometricWeight(ŒΩ_w)),‚Ñì¬π(GeometricWeight(ŒΩ_w)),‚Ñì¬π(GeometricWeight(ŒΩ_w)),
                            ‚Ñì‚àû(), ‚Ñì‚àû(),‚Ñì‚àû(), ‚Ñì‚àû(),
                            ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê)), ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê)),‚Ñì¬π(GeometricWeight(ŒΩ‚Çê)),‚Ñì¬π(GeometricWeight(ŒΩ‚Çê)),
                            ‚Ñì‚àû(),  ‚Ñì‚àû(), 
                            ‚Ñì‚àû(), 
                            ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö)), ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö)),‚Ñì¬π(GeometricWeight(ŒΩ‚Çö)),‚Ñì¬π(GeometricWeight(ŒΩ‚Çö)),
                            )  , ‚Ñì‚àû())

ùëø·µß = ‚Ñì¬π(GeometricWeight(ŒΩ·µß))
ùëø·µ• = ‚Ñì¬π(GeometricWeight(ŒΩ·µ•))
ùëø_w = ‚Ñì¬π(GeometricWeight(ŒΩ_w))
ùëø‚Çö = ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö))
ùëø‚Çê = ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê))

ùëø·µß‚Å¥ = NormedCartesianSpace( ùëø·µß , ‚Ñì‚àû() ) 

space_Œ≥_int = CosFourier( order(Œ≥)[1] , interval(1) ) √ó SinFourier( order(Œ≥)[2] , interval(1) ) √ó CosFourier( order(Œ≥)[3] , interval(1) ) √ó SinFourier( order(Œ≥)[4] , interval(1) ) 
space_v_int = Fourier( order(v)[1] , interval(1) ) √ó Fourier( order(v)[2] , interval(1) ) √ó Fourier( order(v)[3] , interval(1) ) √ó Fourier( order(v)[4] , interval(1) ) 
space_w_int = (Fourier( order(w)[1][1] , interval(1) ) ‚äó Taylor( order(w)[1][2]  ) ) √ó   (Fourier( order(w)[2][1] , interval(1) ) ‚äó Taylor( order(w)[2][2]  ) ) √ó   (Fourier( order(w)[3][1] , interval(1) ) ‚äó Taylor( order(w)[3][2]  ) ) √ó   (Fourier( order(w)[4][1] , interval(1) ) ‚äó Taylor( order(w)[4][2]  ) ) 
space_x_int = space_Œ≥_int √ó ParameterSpace() √ó space_v_int √ó space_w_int √ó ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó space(a) √ó ParameterSpace() √ó  ParameterSpace()^10 √ó space(p)

Œ±_int = interval(Œ±)
Œ≥_int = Sequence(space_Œ≥_int,interval.(Œ≥[:]))
Œª_int = interval(Œª)
v_int = Sequence(space_v_int,interval.(v[:]))
w_int = Sequence(space_w_int,interval.(w[:]))
L_int = interval(L)
Œ∏‚ÇÄ_int = interval.(Œ∏‚ÇÄ)
œÉ_int = interval.(œÉ)
a_int = interval.(a)
œâ_int = interval(œâ)
eigenpairs_int = interval.(eigenpairs)
p_int = interval.(p)
x_int = Sequence(space_x_int, [ Œ≥_int[:]; Œª_int; v_int[:]; w_int[:]; L_int; Œ∏‚ÇÄ_int[:]; œÉ_int[:] ; a_int[:]; œâ_int; eigenpairs_int[:]; p_int[:]])

space_f_int = space_f!(x_int)
space_X_int = ParameterSpace() √ó space_x_int
X_int = Sequence( space_X_int, [ Œ±_int ; x_int[:] ] )
Œ∑_int = Sequence( space_X_int,  interval.(Œ∑[:])  )

space_F_int = space_F!(X_int)

d‚ÇÅ = [0]
for n  in axes(M‚ÇÅ,1)
    for m  in axes(M‚ÇÅ,2)
        for ‚Ñì  in axes(M‚ÇÅ,3)
            if M‚ÇÅ[n,m,‚Ñì] != 0
                d‚ÇÅ[1] = maximum([d‚ÇÅ;(n-1)+m-1])
            end
        end
    end
end
d‚ÇÅ = d‚ÇÅ[1]
d‚ÇÇ = [0]
for n  in axes(M‚ÇÇ,1)
    for m  in axes(M‚ÇÇ,2)
        for ‚Ñì  in axes(M‚ÇÇ,3)
            if M‚ÇÇ[n,m,‚Ñì] != 0
                d‚ÇÇ[1] = maximum([d‚ÇÇ;(n-1)+m-1])
            end
        end
    end
end
d‚ÇÇ = d‚ÇÇ[1]
space_Œì_int_ext = SinFourier( order(Œ≥)[1] , interval(1) ) √ó CosFourier( d‚ÇÅ*order(Œ≥)[2] , interval(1) ) √ó SinFourier( order(Œ≥)[3] , interval(1) ) √ó CosFourier( d‚ÇÇ*order(Œ≥)[4] , interval(1) ) 
space_V_int_ext = ParameterSpace() √ó Fourier( order(v)[1] , interval(1) ) √ó Fourier( d‚ÇÅ*order(v)[2] , interval(1) ) √ó Fourier( order(v)[3] , interval(1) ) √ó Fourier( d‚ÇÇ*order(v)[4] , interval(1) ) 
space_W_int_ext = (Fourier( order(w)[1][1] , interval(1) ) ‚äó Taylor( order(w)[1][2]  ) ) √ó   (Fourier( d‚ÇÅ*order(w)[2][1] , interval(1) ) ‚äó Taylor( d‚ÇÅ*order(w)[2][2]  ) ) √ó   (Fourier( order(w)[3][1] , interval(1) ) ‚äó Taylor( order(w)[3][2]  ) ) √ó   (Fourier( d‚ÇÇ*order(w)[4][1] , interval(1) ) ‚äó Taylor( d‚ÇÇ*order(w)[4][2]  ) ) 
space_G_int_ext = ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó Chebyshev( order(a)[1] + 1 ) √ó Chebyshev( d‚ÇÅ*order(a)[2] + 1 )  √ó Chebyshev( order(a)[3] + 1 ) √ó Chebyshev( d‚ÇÇ*order(a)[4] + 1 )   √ó ParameterSpace() √ó ParameterSpace()
space_E_int_ext = ParameterSpace()^10
space_P_int_ext = (Taylor( order(p)[1][1]) ‚äó Taylor( order(p)[1][2])) √ó (Taylor( d‚ÇÅ*order(p)[2][1]) ‚äó Taylor( d‚ÇÅ*order(p)[2][2])) √ó (Taylor( order(p)[3][1]) ‚äó Taylor( order(p)[3][2])) √ó (Taylor( d‚ÇÇ*order(p)[4][1]) ‚äó Taylor( d‚ÇÇ*order(p)[4][2])) 
space_F_int_ext = ParameterSpace() √ó space_Œì_int_ext √ó space_V_int_ext √ó space_W_int_ext √ó space_G_int_ext √ó space_E_int_ext √ó space_P_int_ext

M‚ÇÅ_int = interval.(M‚ÇÅ)
M‚ÇÇ_int = interval.(M‚ÇÇ)
Œæ‚ÇÅ·µè_int = interval(Œæ‚ÇÅ·µè)
Œæ‚ÇÇ·µè_int = interval(Œæ‚ÇÇ·µè)
length·µ•_int = interval(length·µ•)

d = max(d‚ÇÅ,d‚ÇÇ)
space_Œ≥_int_ext = CosFourier( d*order(Œ≥)[1] , interval(1) ) √ó SinFourier( order(Œ≥)[2] , interval(1) ) √ó CosFourier( d*order(Œ≥)[3] , interval(1) ) √ó SinFourier(order(Œ≥)[4] , interval(1) ) 
space_v_int_ext = Fourier( d*order(v)[1] , interval(1) ) √ó Fourier( order(v)[2] , interval(1) ) √ó Fourier( d*order(v)[3] , interval(1) ) √ó Fourier( order(v)[4] , interval(1) ) 
space_w_int_ext = (Fourier( d*order(w)[1][1] , interval(1) ) ‚äó Taylor( d*order(w)[1][2]  ) ) √ó   (Fourier( order(w)[2][1] , interval(1) ) ‚äó Taylor( order(w)[2][2]  ) ) √ó   (Fourier( d*order(w)[3][1] , interval(1) ) ‚äó Taylor( d*order(w)[3][2]  ) ) √ó   (Fourier( order(w)[4][1] , interval(1) ) ‚äó Taylor( order(w)[4][2]  ) ) 
space_a_int_ext = Chebyshev(d*order(a)[1]) √ó Chebyshev(order(a)[2]) √ó Chebyshev(d*order(a)[3]) √ó Chebyshev(order(a)[4]) 
space_p_int_ext = (Taylor( d*order(p)[1][1]) ‚äó Taylor( d*order(p)[1][2])) √ó (Taylor( order(p)[2][1]) ‚äó Taylor( order(p)[2][2])) √ó (Taylor( d*order(p)[3][1]) ‚äó Taylor( d*order(p)[3][2])) √ó (Taylor( order(p)[4][1]) ‚äó Taylor( order(p)[4][2])) 

space_X_int_ext = ParameterSpace() √ó space_Œ≥_int_ext √ó ParameterSpace() √ó space_v_int_ext √ó space_w_int_ext √ó ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó space_a_int_ext √ó ParameterSpace() √ó  ParameterSpace()^10 √ó space_p_int_ext

space_Œ≥_ext = CosFourier( d*order(Œ≥)[1] , 1 ) √ó SinFourier( order(Œ≥)[2] , 1 ) √ó CosFourier( d*order(Œ≥)[3] , 1) √ó SinFourier(order(Œ≥)[4] , 1 ) 
space_v_ext = Fourier( d*order(v)[1] , 1 ) √ó Fourier( order(v)[2] , 1 ) √ó Fourier( d*order(v)[3] , 1 ) √ó Fourier( order(v)[4] , 1 ) 
space_w_ext = (Fourier( d*order(w)[1][1] , 1 ) ‚äó Taylor( d*order(w)[1][2]  ) ) √ó   (Fourier( order(w)[2][1] , 1 ) ‚äó Taylor( order(w)[2][2]  ) ) √ó   (Fourier( d*order(w)[3][1] , 1 ) ‚äó Taylor( d*order(w)[3][2]  ) ) √ó   (Fourier( order(w)[4][1] ,1) ‚äó Taylor( order(w)[4][2]  ) ) 
space_a_ext = Chebyshev(d*order(a)[1]) √ó Chebyshev(order(a)[2]) √ó Chebyshev(d*order(a)[3]) √ó Chebyshev(order(a)[4]) 
space_p_ext = (Taylor( d*order(p)[1][1]) ‚äó Taylor( d*order(p)[1][2])) √ó (Taylor( order(p)[2][1]) ‚äó Taylor( order(p)[2][2])) √ó (Taylor( d*order(p)[3][1]) ‚äó Taylor( d*order(p)[3][2])) √ó (Taylor( order(p)[4][1]) ‚äó Taylor( order(p)[4][2])) 

space_X_ext = ParameterSpace() √ó space_Œ≥_ext √ó ParameterSpace() √ó space_v_ext √ó space_w_ext √ó ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó ParameterSpace() √ó space_a_ext √ó ParameterSpace() √ó  ParameterSpace()^10 √ó space_p_ext

# ====================================================================================
# Functions
# ====================================================================================

grid2cheb(x_fft::Vector{<:Interval}, N) =
[rifft!(complex.(getindex.(x_fft, i)), Chebyshev(N)) for i ‚àà eachindex(x_fft[1])]

grid2cheb(x_fft::Vector{<:Vector}, N) =
    [ifft!(complex.(getindex.(x_fft, i)), Chebyshev(N)) for i ‚àà eachindex(x_fft[1])]

grid2cheb(x_fft::Vector{<:Matrix}, N) =
    [ifft!(complex.(getindex.(x_fft, i, j)), Chebyshev(N)) for i ‚àà axes(x_fft[1], 1), j ‚àà axes(x_fft[1], 2)]

grid2cheb(x_fft::Vector{<:LinearOperator}, N) =
    [ifft!(complex.(getindex.(x_fft, i, j)), Chebyshev(N)) for i ‚àà indices(codomain(x_fft[1])), j ‚àà indices(domain(x_fft[1]))]

grid2cheb(x_fft::Vector{<:Sequence}, N) =
    [ifft!(complex.(getindex.(x_fft, i)), Chebyshev(N)) for i ‚àà indices(space(x_fft[1]))]   

function cheb2grid(x, N_fft)
    vals = fft.(x, N_fft)
    return [getindex.(vals, i) for i ‚àà eachindex(first(vals))]
end

# ====================================================================================
# Variables
# ====================================================================================
clc()
printstyled("============================================================\n"; color = :blue)
printstyled("Set up and Converting Grid to Chebyshev\n"; color = :blue)
printstyled("============================================================\n"; color = :blue)
println("‚ñ™ Grid to Chebyshev in DFT")
N_fft = nextpow(2, 2N + 1)
npts = N_fft√∑2 + 1
space_X = space(X_grid[1])
space_F = space_F!(X_grid[1])

# More functions
function idft!(v_grid::Vector)
    N = length(v_grid) - 1
    N_dft = 2*N
    c = zeros(eltype(v_grid), Chebyshev(N))
    for n ‚àà 0:N
        c[n] = v_grid[N+1] + (-1)^n * v_grid[1]
        for k ‚àà 1:N-1
            c[n] += 2 * v_grid[N+1-k] * cospi(k*n/N)
        end
        c[n] /= N_dft
    end
    c[N] /= 2
    return c
end
function idft!(v_grid::Vector{Complex{Interval{T}}}) where {T}
    N = length(v_grid) - 1
    N_dft = 2*N
    c = zeros(Complex{Interval{T}}, Chebyshev(N))
    for n ‚àà 0:N
        c[n] = v_grid[N+1] + ExactReal((-1)^n) * v_grid[1]
        for k ‚àà 1:N-1
            c[n] += ExactReal(2) * v_grid[N+1-k] * setprecision(BigFloat, 256) do
                cospi(interval(BigFloat, k*n // N))
            end
        end
        c[n] /= ExactReal(N_dft)
    end
    c[N] /= ExactReal(2)
    return c
end

dft_grid2cheb(A_grid::Vector{<:LinearOperator}) =
    LinearOperator(domain(A_grid[1]), codomain(A_grid[1]),
        [idft!(getindex.(A_grid, i, j)) for i ‚àà indices(codomain(A_grid[1])), j ‚àà indices(domain(A_grid[1]))])


dft_grid2cheb(x_grid::Vector{<:Sequence}) =
    Sequence(space(x_grid[1]), [idft!(getindex.(x_grid, i)) for i ‚àà indices(space(x_grid[1]))])

    
dft_grid2cheb(A_grid::Vector{<:Matrix}) =
    [idft!(getindex.(A_grid, i, j)) for i ‚àà axes(A_grid[1], 1), j ‚àà axes(A_grid[1], 2)]


X_cheb_sequence = dft_grid2cheb(map(X -> interval.(X),X_grid)) 
X_fft_mid = map(X -> mid.(X), cheb2grid(X_cheb_sequence, N_fft))
X_cheb = X_cheb_sequence[:]
X_cheb_sequence = Sequence(space_X_int,X_cheb)

# Checking if ŒΩ is not too small for the proof 
#X_cheb_sequence = Sequence( space_X_int, X_cheb)

œÉ‚ÇÅ_cheb = component(X_cheb_sequence , 18)[1]
œÉ‚ÇÇ_cheb = component(X_cheb_sequence , 19)[1]
norm_z = sqrt( norm(œÉ‚ÇÅ_cheb^2 + œÉ‚ÇÇ_cheb^2,interval(1)) )

Œ∏‚ÇÅ_cheb = component(X_cheb_sequence , 16)[1]
Œ∏‚ÇÇ_cheb = component(X_cheb_sequence , 17)[1]
norm_y = sqrt( norm(Œ∏‚ÇÅ_cheb^2 + Œ∏‚ÇÇ_cheb^2,interval(1)) )

if inf(norm_z) > sup( ŒΩ‚Çö ) && inf(norm_y) > sup( ŒΩ_w )
    error(String("We need ŒΩ‚Çö > $(inf(norm_z)) and ŒΩ_w > $(inf(norm_y))" ))
elseif inf(norm_z) > sup( ŒΩ‚Çö )
    error(String(" We need ŒΩ‚Çö > $(inf(norm_z))"))
elseif inf(norm_y) > sup( ŒΩ_w )
    error(String("We need ŒΩ_w > $(inf(norm_y))"))
end

Œ∑_cheb_sequence = dft_grid2cheb(map(X -> interval.(X),Œ∑_grid)) 
Œ∑_fft = map(X -> mid.(X), cheb2grid(Œ∑_cheb_sequence, N_fft))
Œ∑_cheb = Œ∑_cheb_sequence[:]

A_fft = A_fft!(  Vector{Vector}( undef, 29 ), space_X, space_F , X_fft_mid, Œ∫, star, length·µ•, M‚ÇÅ, M‚ÇÇ , Œ∑_fft ,N_fft)
A_cheb = A_cheb!(Vector{Any}( undef, 29 ) , A_fft , N)
A_fft = nothing
dN = dN!( N , M‚ÇÅ , M‚ÇÇ , order(p) , order(w))
dN_ftt = nextpow.(2, 2dN  .+1)

# Some other Variables needed later
Œõ_tails = Vector{Vector}(undef, 29)
Œª_grid = Vector{Sequence}(undef, lastindex(X_grid))
Œª‚ÇÅ_grid = Vector{Sequence}(undef, lastindex(X_grid))
Œª‚ÇÇ_grid = Vector{Sequence}(undef, lastindex(X_grid))
for i = 1:lastindex(X_grid)
    Œª_grid[i] = component( X_grid[i] , 6)
    Œª‚ÇÅ_grid[i] = Sequence( ParameterSpace(),  [component( X_grid[i] , 25)[1]])
    Œª‚ÇÇ_grid[i] = Sequence( ParameterSpace(),  [component( X_grid[i] , 25)[6]])
end

Œª_cheb = dft_grid2cheb(map(X -> interval.(X),Œª_grid)) 
Œª‚ÇÅ_cheb = dft_grid2cheb(map(X -> interval.(X),Œª‚ÇÅ_grid)) 
Œª‚ÇÇ_cheb = dft_grid2cheb(map(X -> interval.(X),Œª‚ÇÇ_grid)) 

# ======================================================================================================
#  Y‚ÇÄ  
# ======================================================================================================
# Y‚ÇÄ body  
printstyled("============================================================\n"; color = :blue)
printstyled("1. Bound Y‚ÇÄ\n"; color = :blue)   
printstyled("============================================================\n"; color = :blue)

println("‚ñ™ Computing œÄ·¥∫AF")
function AF!( A_cheb::Vector, space_X_int::CartesianProduct, space_F_int::CartesianProduct , dN::Vector{Int64},  dN_ftt::Vector{Int64}, X_cheb::Vector{<:Sequence}, Œ∑_cheb::Vector{<:Sequence}, Œ∫::Int64, Œæ‚ÇÅ·µè_int::Complex{Interval{Float64}} ,Œæ‚ÇÇ·µè_int::Complex{Interval{Float64}}, star::Union{Vector,Int64}, length·µ•_int::Interval{Float64}, M‚ÇÅ_int::Array{<:Interval}, M‚ÇÇ_int::Array{<:Interval} )
    F_fft = F_fft!(Vector{Any}( undef, 29 ), space_X_int, space_F_int , dN_ftt, X_cheb, Œ∑_cheb, Œ∫, Œæ‚ÇÅ·µè_int ,Œæ‚ÇÇ·µè_int, star, length·µ•_int, M‚ÇÅ_int, M‚ÇÇ_int)
    AF_fft = AF_fft!(Vector{Vector}( undef, 29 ), A_cheb, F_fft, space_X_int, space_F_int, dN_ftt)
    AF = Sequence( space_X_int , AF_cheb!( AF_fft, dN) )
    return AF
end
AF = AF!( A_cheb, space_X_int, space_F_int , dN,  dN_ftt, X_cheb, Œ∑_cheb, Œ∫, Œæ‚ÇÅ·µè_int ,Œæ‚ÇÇ·µè_int, star, length·µ•_int, M‚ÇÅ_int, M‚ÇÇ_int )
GC.gc()

# Y‚ÇÄ tails
println(" ")
println("‚ñ™ Computing œÄ ·™≤ AF")
Y‚ÇÄ_tails_cheb = Y‚ÇÄ_tails_fft!( F_ext_fft!( Vector{Any}( undef, 29 ), X_cheb, Œ∑_cheb, space_X_int, space_F_int_ext , dN_ftt, Œ∫, Œæ‚ÇÅ·µè_int ,Œæ‚ÇÇ·µè_int, star, length·µ•_int, M‚ÇÅ_int, M‚ÇÇ_int) , Œª_cheb,Œª‚ÇÅ_cheb,Œª‚ÇÇ_cheb, dN, dN_ftt,space_F ,w ,a,p,space_F_int_ext, Œõ_tails) 
GC.gc()

Y‚ÇÄ_vec = Vector{Any}(undef, 29)
for i = 1:29
    if i in [1;6;15;16;17;18;19;24;25]
        local space_test_in = ‚Ñì‚àû()
    elseif i in [ 2 ;3;4;5]
        local space_test_in =  ‚Ñì¬π(GeometricWeight(ŒΩ·µß))
    elseif i in [ 7;8;9;10]
        local space_test_in =  ‚Ñì¬π(GeometricWeight(ŒΩ·µ•))
    elseif i in [ 11;12;13;14]
        local space_test_in =  ‚Ñì¬π(GeometricWeight(ŒΩ_w))
    elseif i in [ 20;21;22;23]
        local space_test_in =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê))
    elseif i in [ 26;27;28;29]
        local space_test_in =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö))
    end
    if i in [1;6;15;16;17;18;23;24;25]
        local space_test_out = ‚Ñì‚àû()
    elseif i in [ 2 ;3;4;5]
        local space_test_out =  ‚Ñì¬π(GeometricWeight(ŒΩ·µß))
    elseif i in [ 7;8;9;10]
        local space_test_out =  ‚Ñì¬π(GeometricWeight(ŒΩ·µ•))
    elseif i in [ 11;12;13;14]
        local space_test_out =  ‚Ñì¬π(GeometricWeight(ŒΩ_w))
    elseif i in [ 19;20;21;22]
        local space_test_out =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê))
    elseif i in [ 26;27;28;29]
        local space_test_out =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö))
    end
    global Y‚ÇÄ_vec[i] = norm(  component(AF , i ) , space_test_in  ) +  norm( component( Y‚ÇÄ_tails_cheb ,i ) , space_test_out)   
end
AF = nothing
Y‚ÇÄ_tails_cheb = nothing
GC.gc()
# ======================================================================================================
#  Z‚ÇÅ
# ======================================================================================================
printstyled("============================================================\n"; color = :blue)
printstyled("2. Bound Z‚ÇÅ\n"; color = :blue)
printstyled("============================================================\n"; color = :blue)
A·µ¢‚±º_cheb = A·µ¢‚±º_cheb!(Matrix{Any}( undef, 29 , 29), space_X , space_F, N, N_fft , X_fft_mid, Œ∫, star, length·µ•, M‚ÇÅ, M‚ÇÇ , Œ∑_fft)
GC.gc()

# Z‚ÇÅ tails
println("‚ñ™ Computing œÄ ·™≤ A[DF(ÃÑx) - A‚Ä†]")

DN = DN!( N , M‚ÇÅ , M‚ÇÇ , order(p) , order(w), Œ∫)
DN_ftt = copy(DN)
for i = 1:29
    for j = 1:29
    if DN[i,j] >0
        DN_ftt[i,j] = nextpow.(2, 2DN[i,j] )
    else
        DN_ftt[i,j] = 1
    end
    end
end
Œõ =  Vector{Any}(undef, 29)
for i = 1:29
    Œõ[i] = maximum(interval.(Œõ_tails[i]))
end
Z‚ÇÅ_‚ÇÅ  =  Z‚ÇÅ_mat!(zeros( Interval{Float64} ,29,29), X_cheb, DN, DN_ftt, Œõ , space_X_int, M‚ÇÅ_int, M‚ÇÇ_int , ùëø·µß , ùëø·µ• , ùëø_w , ùëø‚Çö , ùëø‚Çê  ,ŒΩ‚Çö , ŒΩ‚Çê ,ŒΩ_w , A·µ¢‚±º_cheb ,space_X_int_ext,space_F_int, ŒΩ·µ•,ŒΩ·µß)
GC.gc()

println( maximum( Z‚ÇÅ_‚ÇÅ ))


# Z‚ÇÅ body
println(" ")
println("‚ñ™ Computing œÄ·¥∫A[DF(ÃÑx) - A‚Ä†]")
Z‚ÇÅ_ = Z‚ÇÅ_body!(copy(Z‚ÇÅ_‚ÇÅ), X_cheb, A·µ¢‚±º_cheb, DN, DN_ftt, M‚ÇÅ_int, M‚ÇÇ_int , ŒΩ·µß, ŒΩ·µ•,  ŒΩ‚Çê, space_F,space_X_int, ŒΩ_w, ŒΩ‚Çö)
GC.gc()

# Weights
println(" ")
weight_x = weight_x!(Z‚ÇÅ_ )

# Problem dimensions
m = 29  # number of rows in A
n = 29  # number of variables

# Example matrix A (strictly positive to avoid division by zero)


# Lower bound Œ± for the maximum value constraint
t_min = 0.6  # must satisfy 0 < Œ± < 1

# Define optimization model
model = Model(Ipopt.Optimizer)

# Decision variables:
# v: vector of weights (positive and sum to 1)
# t_max: upper bound on the expressions v[i] * sum_j A[i,j] / v[j]
@variable(model, v[1:n] >= 1e-9)
@variable(model, t_min <= t_max <= 0.999)

# Normalization constraint: sum of v equals 1
@constraint(model, sum(v) == 1)

# For each row i, enforce:
# v[i] * sum_j (A[i,j] / v[j]) ‚â§ t_max
@NLconstraint(model, [i = 1:m], v[i] * sum(mid.(Z‚ÇÅ_)[i,j] / v[j] for j in 1:n) <= t_max)

# Objective: minimize the maximum value across all rows
@objective(model, Min, t_max)

# Solve the problem
optimize!(model);

# Extract and display results

    v_opt = value.(v)
    t_opt = value(t_max)
    norm(1 ./ v_opt) .* v_opt

   weight_x =  interval.( norm(1 ./ v_opt) .* v_opt)



Y‚ÇÄ = maximum( Y‚ÇÄ_vec .* weight_x)
printstyled("‚ú∂ Y‚ÇÄ = $(sup(Y‚ÇÄ))\n"; color = :green)

# Z‚ÇÅ computing with weights  
Z‚ÇÅ = maximum( (Z‚ÇÅ_ * ( interval(1) ./ weight_x )) .* (   weight_x) )
printstyled("‚ú∂ Z‚ÇÅ = $(sup(Z‚ÇÅ))\n"; color = :green)
GC.gc()
# Z‚ÇÄ 
printstyled("============================================================\n"; color = :blue)
printstyled("3. Bound Z‚ÇÄ\n"; color = :blue)
printstyled("============================================================\n"; color = :blue)


function space_operator·µ¢‚±º!( space_ind, i )
    if space_ind == 1
        if i in [1;6;15;16;17;18;19;24;25]
            space_out = ‚Ñì‚àû()
        elseif i in [ 2 ;3;4;5]
            space_out =  ‚Ñì¬π(GeometricWeight(ŒΩ·µß))
        elseif i in [ 7;8;9;10]
            space_out =  ‚Ñì¬π(GeometricWeight(ŒΩ·µ•))
        elseif i in [ 11;12;13;14]
            space_out =  ‚Ñì¬π(GeometricWeight(ŒΩ_w))
        elseif i in [ 20;21;22;23]
            space_out =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê))
        elseif i in [ 26;27;28;29]
            space_out =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö))
        end
    else
        if i in [1;6;15;16;17;18;23;24;25]
            space_out = ‚Ñì‚àû()
        elseif i in [ 2 ;3;4;5]
            space_out =  ‚Ñì¬π(GeometricWeight(ŒΩ·µß))
        elseif i in [ 7;8;9;10]
            space_out =  ‚Ñì¬π(GeometricWeight(ŒΩ·µ•))
        elseif i in [ 11;12;13;14]
            space_out =  ‚Ñì¬π(GeometricWeight(ŒΩ_w))
        elseif i in [ 19;20;21;22]
            space_out =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê))
        elseif i in [ 26;27;28;29]
            space_out =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö))
        end
    end
    return space_out
end



println("‚ñ™ Computing DF on Grid")
DF = DF_ext_fft!(Matrix{Any}(undef,29,29), X_cheb, Œ∑_cheb, DN_ftt, space_X_int, space_X_int ,space_F_int, Œ∫, star, length·µ•_int, M‚ÇÅ_int, M‚ÇÇ_int )
F = zeros(space_F);

A_ = A_!(zeros( Interval{Float64}, 29 , 29 ) ,A·µ¢‚±º_cheb,space_F_int,space_X_int,ŒΩ·µß,ŒΩ·µ•,ŒΩ_w,ŒΩ‚Çê,ŒΩ‚Çö);

DF_cheb_truncated = zeros( Sequence{Chebyshev, Vector{Complex{Interval{Float64}}}} , space_X_int, space_F_int)
DF_tail_norm = zeros( Interval{Float64} , 29,29)
    for i in 1:29
        for j = 1:29
            if j in [1;6;15;16;17;18;19;24;25]
                local space_test_in2 = ‚Ñì‚àû()
            elseif j in [ 2 ;3;4;5]
                local space_test_in2 =  ‚Ñì¬π(GeometricWeight(ŒΩ·µß))
            elseif j in [ 7;8;9;10]
                local space_test_in2 =  ‚Ñì¬π(GeometricWeight(ŒΩ·µ•))
            elseif j in [ 11;12;13;14]
                local space_test_in2 =  ‚Ñì¬π(GeometricWeight(ŒΩ_w))
            elseif j in [ 20;21;22;23]
                local space_test_in2 =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê))
            elseif j in [ 26;27;28;29]
                local space_test_in2 =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö))
            end
            if i in [1;6;15;16;17;18;23;24;25]
                local space_test_out2 = ‚Ñì‚àû()
            elseif i in [ 2 ;3;4;5]
                local space_test_out2 =  ‚Ñì¬π(GeometricWeight(ŒΩ·µß))
            elseif i in [ 7;8;9;10]
                local space_test_out2 =  ‚Ñì¬π(GeometricWeight(ŒΩ·µ•))
            elseif i in [ 11;12;13;14]
                local space_test_out2 =  ‚Ñì¬π(GeometricWeight(ŒΩ_w))
            elseif i in [ 19;20;21;22]
                local space_test_out2 =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê))
            elseif i in [ 26;27;28;29]
                local space_test_out2 =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö))
            end
            if isassigned(DF,i,j)
                component( DF_cheb_truncated ,i,j)[:,:] = grid2cheb( map( X -> X[:,:],DF[i , j])  , DN[i,j] )
                tail_compo = LinearOperator(  space_X_int[j], space_F_int[i],  component( DF_cheb_truncated ,i,j)[:,:] )
                component( DF_cheb_truncated ,i,j)[:,:] = map( X -> project( X , Chebyshev(N)) ,component( DF_cheb_truncated ,i,j)[:,:])
                tail_compo[:,:] .= (x -> (x[0:N] .= 0; x)).(tail_compo[:,:])
                DF_tail_norm[i,j] = opnorm( norm.(tail_compo ,1),space_test_in2,space_test_out2)
            end
        end
    end

DF = nothing
GC.gc()

DF_mid = Matrix{Any}(undef,29,29)
œÅ = zeros(Interval{Float64}, 29,29)
DF_mid_norm = zeros(Interval{Float64}, 29,29)

A_mid = Matrix{Any}(undef,29,29)
r = zeros(Interval{Float64}, 29,29)
A_mid_norm = zeros(Interval{Float64}, 29,29)

GC.gc()
println("")
println("‚ñ™ Computing Error on the Tail")
iter = ProgressBar(1:29)
set_description(iter, "    - ")
for i in iter
    for j = 1:29
        if DN_ftt[i,j] > 1
            DF_mid[i,j] = cheb2grid( component( DF_cheb_truncated ,i,j)[:,:] ,  nextpow( 2, 4*N + 1 )     ) 
            DF_temp = grid2cheb( DF_mid[i,j] , 2N)
            DF_mid_norm[i,j]   = opnorm(LinearOperator( space_X_int[j], space_F_int[i], norm.( map( X -> interval.(X),map(  X -> mid.(X) ,DF_temp ) ) ,1)) , space_operator·µ¢‚±º!( 1, j ), space_operator·µ¢‚±º!( 2 , i )  )
            œÅ[i,j] = opnorm(LinearOperator( space_X_int[j], space_F_int[i], norm.( map( X -> interval.(X),map(  X -> radius.(X) , DF_temp )).*interval(-1,1) ,1)), space_operator·µ¢‚±º!( 1, j ), space_operator·µ¢‚±º!( 2 , i )  )
            DF_mid[i,j] = map(X -> mid.(X) , DF_mid[i,j])
        end
        A_mid[i,j] = cheb2grid( A·µ¢‚±º_cheb[i,j] ,  nextpow( 2, 4*N + 1 )     ) 
        A_temp = grid2cheb( A_mid[i,j] , 2N)
        A_mid_norm[i,j]  = opnorm(LinearOperator( space_F_int[j], space_X_int[i], norm.(  map( X -> interval.(X),  A_temp ),1)) , space_operator·µ¢‚±º!( 2, j ), space_operator·µ¢‚±º!( 1 , i )  )
        r[i,j] = opnorm(LinearOperator( space_F_int[j], space_X_int[i], norm.(  map( X -> interval.(X),  map(  X -> radius.(X) , A_temp )).*interval(-1,1) ,1)) , space_operator·µ¢‚±º!( 2, j ), space_operator·µ¢‚±º!( 1 , i )  )
        A_mid[i,j]  =map(X -> mid.(X) , A_mid[i,j])
    end
end 

GC.gc()

B  = zeros(Interval{Float64}, 29,29)
println("")
println("‚ñ™ Computing || I - ADF·¥∫||")
iter = ProgressBar(1:29)
set_description(iter, "    - ")
I_ADF·¥∫·µ¢‚±º  = Vector{Matrix}(undef, nextpow(2, 4N+1))
for i in iter
    for j= 1:29
        for ‚Ñì = 1:nextpow(2, 4N+1)
            I_ADF·¥∫·µ¢‚±º[‚Ñì] = zeros( Complex{Interval{Float64}} , space_X_int[j], space_X_int[i])[:,:]
            if j == i
                I_ADF·¥∫·µ¢‚±º[‚Ñì] = I_ADF·¥∫·µ¢‚±º[‚Ñì] + UniformScaling(interval(1))
            end
        end
       for k = 1:29
            if DN_ftt[k,j] > 1
            I_ADF·¥∫·µ¢‚±º = I_ADF·¥∫·µ¢‚±º .- map( X -> interval.(X), A_mid[i,k].*DF_mid[k,j]) 
            end
        end
        B[i,j] = opnorm( LinearOperator(  space_X_int[j], space_X_int[i] , norm.( grid2cheb(  I_ADF·¥∫·µ¢‚±º ,2N) , 1  ) ) , space_operator·µ¢‚±º!( 1, j ) , space_operator·µ¢‚±º!( 1, i ) )
    end
end



GC.gc()

function M_œµ!(n,œµ)
    return (ExactReal(1) + ExactReal(2)*œµ + œµ^2 )*((ExactReal(1) + œµ)^(interval(n)) )-ExactReal(1)
end         

œµ = interval(2.22045)*interval(10)^ExactReal(-16)
M_œµ = M_œµ!(maximum( [ length(component(X_grid[1],i)) for i = 1:29] ),œµ)

Z‚ÇÄ = maximum( ((B + M_œµ*A_mid_norm*DF_mid_norm + r*DF_mid_norm +  œÅ*A_mid_norm + r*œÅ + A_* DF_tail_norm)  * ( interval(1) ./ weight_x )) .* (   weight_x) )


# Z‚ÇÄ = 0
println("")
 printstyled("‚ú∂ Z‚ÇÄ = $(sup(Z‚ÇÄ))\n"; color = :green)



# ======================================================================================================
#  Z‚ÇÇ
# ======================================================================================================
printstyled("============================================================\n"; color = :blue)
printstyled("4. Bound Z‚ÇÇ\n"; color = :blue)
printstyled("============================================================\n"; color = :blue)

X_cheb_norm = Sequence( space_X_int, norm.( X_cheb, 1))
Œ±_int = real(X_cheb_norm[1])
x = component(X_cheb_norm,2:29)
Œ≥_int,Œª,v_int,w_int,L,Œ∏‚ÇÄ_int,œÉ_int,a_int,œâ,eigenpairs_int,p_int = x2var!(x)

Œ≥‚ÇÅ , Œ≥‚ÇÇ , Œ≥‚ÇÉ , Œ≥‚ÇÑ = eachcomponent(Œ≥_int)
v‚ÇÅ , v‚ÇÇ , v‚ÇÉ , v‚ÇÑ = eachcomponent(v_int)
w‚ÇÅ , w‚ÇÇ , w‚ÇÉ , w‚ÇÑ = eachcomponent(w_int)
p‚ÇÅ , p‚ÇÇ , p‚ÇÉ , p‚ÇÑ = eachcomponent(p_int)
a‚ÇÅ , a‚ÇÇ , a‚ÇÉ , a‚ÇÑ = eachcomponent(a_int)

c‚ÇÅ  =  Polynomial( [ norm( Œ±_int ) , interval(1) / weight_x[1] ] , :r)
c‚ÇÇ  =  Polynomial( [ norm( Œ≥‚ÇÅ , ùëø·µß ) , interval(1) / weight_x[2] ] , :r)
c‚ÇÑ  =  Polynomial( [ norm( Œ≥‚ÇÉ , ùëø·µß ) , interval(1) / weight_x[4] ] , :r)
c‚ÇÇ_ext  =  Polynomial( [ norm( Œ≥‚ÇÅ , ùëø·µß ) , interval(1) / weight_x[2] ] , :r)
c‚ÇÑ_ext  =  Polynomial( [ norm( Œ≥‚ÇÉ , ùëø·µß ) , interval(1) / weight_x[4] ] , :r)
c‚Çá  =  Polynomial( [ norm( v‚ÇÅ , ùëø·µ• ) , interval(1) / weight_x[7] ] , :r)
c‚Çâ  =  Polynomial( [ norm( v‚ÇÉ , ùëø·µ• ) , interval(1) / weight_x[9] ] , :r)
c‚ÇÅ‚ÇÅ  =  Polynomial( [ norm( w‚ÇÅ , ùëø_w ) , interval(1) / weight_x[11] ] , :r)
c‚ÇÅ‚ÇÉ  =  Polynomial( [ norm( w‚ÇÉ , ùëø_w ) , interval(1) / weight_x[13] ] , :r)
c‚ÇÅ‚ÇÖ  =  Polynomial( [ norm( L ) , interval(1) / weight_x[15] ] , :r)
c‚ÇÇ‚ÇÄ  =  Polynomial( [ norm( a‚ÇÅ , ùëø‚Çê ) , interval(1) / weight_x[20] ] , :r)
c‚ÇÇ‚ÇÇ  =  Polynomial( [ norm( a‚ÇÉ , ùëø‚Çê ) , interval(1) / weight_x[22] ] , :r)
c‚ÇÇ‚ÇÑ =  Polynomial( [ norm( œâ_int ) , interval(1) / weight_x[24] ] , :r)
c‚ÇÇ‚ÇÖ_‚ÇÇ =  Polynomial( [ norm( eigenpairs_int[2] ) , interval(1) / weight_x[25] ] , :r)
c‚ÇÇ‚ÇÖ_‚ÇÑ =  Polynomial( [ norm( eigenpairs_int[4] ) , interval(1) / weight_x[25] ] , :r)
c‚ÇÇ‚ÇÖ_‚Çá =  Polynomial( [ norm( eigenpairs_int[7] ) , interval(1) / weight_x[25] ] , :r)
c‚ÇÇ‚ÇÖ_‚Çâ =  Polynomial( [ norm( eigenpairs_int[9] ) , interval(1) / weight_x[25] ] , :r)
c‚ÇÇ‚ÇÜ  =  Polynomial( [ norm( p‚ÇÅ , ùëø‚Çö ) , interval(1) / weight_x[26] ] , :r)
c‚ÇÇ‚Çà  =  Polynomial( [ norm( p‚ÇÉ , ùëø‚Çö ) , interval(1) / weight_x[28] ] , :r)

ŒîDF = Matrix{ Any }( undef , 29 , 29 )
ŒîDF[:,:] .= Polynomial([interval(0)] , :r)

# i = 2
ŒîDF[ 2 , 3 ] = Polynomial( [ interval(0) ; interval(1)  / weight_x[24] ] , :r)
ŒîDF[ 2 , 24] = Polynomial( [ interval(0) ; interval(1)  / weight_x[3] ] , :r)
# i = 4
ŒîDF[ 4 , 5 ] = Polynomial( [ interval(0) ; interval(1)  / weight_x[24] ] , :r)
ŒîDF[ 4 , 24] = Polynomial( [ interval(0) ; interval(1)  / weight_x[5] ] , :r)
# i = 7 
ŒîDF[ 7 , 6 ] = Polynomial( [ interval(0) ; interval(1)  / weight_x[7]] , :r)
ŒîDF[ 7 , 7 ] = Polynomial( [ interval(0) ; interval(1) / weight_x[6] ] , :r)
ŒîDF[ 7 , 8 ] = Polynomial( [ interval(0) ; interval(1)  / weight_x[24]] , :r)
ŒîDF[ 7 , 24 ] = Polynomial( [ interval(0) ; interval(1)  / weight_x[8]] , :r)
# i = 9 
ŒîDF[ 9 , 6 ] = Polynomial( [ interval(0) ; interval(1)  / weight_x[9]] , :r)
ŒîDF[ 9 , 9 ] = Polynomial( [ interval(0) ; interval(1) / weight_x[6] ] , :r)
ŒîDF[ 9 , 10 ] = Polynomial( [ interval(0) ; interval(1)  / weight_x[24] ] , :r)
ŒîDF[ 9 , 24 ] = Polynomial( [ interval(0) ; interval(1) / weight_x[10] ] , :r)


# i = 11
ŒîDF[ 11 , 12 ] = Polynomial( [ interval(0) ; interval(1) / weight_x[24] ] , :r)
ŒîDF[ 11 , 24] = Polynomial( [ interval(0) ; interval(1) / weight_x[12] ] , :r)

# i = 13
ŒîDF[ 13 , 14 ] = Polynomial( [ interval(0) ; interval(1) / weight_x[24] ] , :r)
ŒîDF[ 13 , 24] = Polynomial( [ interval(0) ; interval(1) / weight_x[14] ] , :r)

norm_t = sqrt((interval(1)/(weight_x[18]))^2 + (interval(1)/(weight_x[19]))^2)
norm_h = sqrt((interval(1)/(weight_x[16]))^2 + (interval(1)/(weight_x[17]))^2)

ŒîDF[ 15 , 26 ] = Polynomial( [ interval(0) ; ExactReal(2)*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö -norm_z  ) ] , :r)
# i = 16
ŒîDF[ 16 , 27 ] = Polynomial( [ interval(0) ; ExactReal(2)*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö -norm_z  ) ] , :r)
# i = 17
ŒîDF[ 17 , 28 ] = Polynomial( [ interval(0) ; ExactReal(2)*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö -norm_z  ) ] , :r)
# i = 18
ŒîDF[ 18 , 29 ] = Polynomial( [ interval(0) ; ExactReal(2)*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö -norm_z  ) ] , :r)

# i = 15
ŒîDF[ 15 , 18 ] = Polynomial( [ interval(0) ;  ExactReal(4)*norm( p‚ÇÅ , ùëø‚Çö )*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö - norm_z )/log(ExactReal(2)*ŒΩ‚Çö/(norm_z + ŒΩ‚Çö ))  +  interval(2)/ŒΩ‚Çö/weight_x[26]  ], :r) 
ŒîDF[ 15 , 19 ] = Polynomial( [ interval(0) ;  ExactReal(4)*norm( p‚ÇÅ , ùëø‚Çö )*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö - norm_z )/log(ExactReal(2)*ŒΩ‚Çö/(norm_z + ŒΩ‚Çö ))  +  interval(2)/ŒΩ‚Çö/weight_x[26]  ], :r) 
# i = 16
ŒîDF[ 16 , 18 ] = Polynomial( [ interval(0) ;  ExactReal(4)*norm( p‚ÇÇ , ùëø‚Çö )*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö - norm_z )/log(ExactReal(2)*ŒΩ‚Çö/(norm_z + ŒΩ‚Çö ))  +  interval(2)/ŒΩ‚Çö/weight_x[27]  ], :r) 
ŒîDF[ 16 , 19 ] = Polynomial( [ interval(0) ;  ExactReal(4)*norm( p‚ÇÇ , ùëø‚Çö )*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö - norm_z )/log(ExactReal(2)*ŒΩ‚Çö/(norm_z + ŒΩ‚Çö ))  +  interval(2)/ŒΩ‚Çö/weight_x[27]  ], :r) 
# i = 17
ŒîDF[ 17 , 18 ] = Polynomial( [ interval(0) ;  ExactReal(4)*norm( p‚ÇÉ , ùëø‚Çö )*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö - norm_z )/log(ExactReal(2)*ŒΩ‚Çö/(norm_z + ŒΩ‚Çö ))  +  interval(2)/ŒΩ‚Çö/weight_x[28]  ], :r) 
ŒîDF[ 17 , 19 ] = Polynomial( [ interval(0) ;  ExactReal(4)*norm( p‚ÇÉ , ùëø‚Çö )*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö - norm_z )/log(ExactReal(2)*ŒΩ‚Çö/(norm_z + ŒΩ‚Çö ))  +  interval(2)/ŒΩ‚Çö/weight_x[28]  ], :r) 
# i = 18
ŒîDF[ 18 , 18 ] = Polynomial( [ interval(0) ;  ExactReal(4)*norm( p‚ÇÑ , ùëø‚Çö )*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö - norm_z )/log(ExactReal(2)*ŒΩ‚Çö/(norm_z + ŒΩ‚Çö ))  +  interval(2)/ŒΩ‚Çö/weight_x[29]  ], :r) 
ŒîDF[ 18 , 19 ] = Polynomial( [ interval(0) ;  ExactReal(4)*norm( p‚ÇÑ , ùëø‚Çö )*norm_t/ŒΩ‚Çö/(ŒΩ‚Çö - norm_z )/log(ExactReal(2)*ŒΩ‚Çö/(norm_z + ŒΩ‚Çö ))  +  interval(2)/ŒΩ‚Çö/weight_x[29]  ], :r) 

norm_T = interval(1)/ŒΩ‚Çê + interval(2)ŒΩ‚Çê
D‚ÇÅ‚ÇÄ = Derivative(1,0)
Dw‚ÇÅ = abs.(D‚ÇÅ‚ÇÄ*w‚ÇÅ)
Dw‚ÇÇ = abs.(D‚ÇÅ‚ÇÄ*w‚ÇÇ)
Dw‚ÇÉ = abs.(D‚ÇÅ‚ÇÄ*w‚ÇÉ)
Dw‚ÇÑ = abs.(D‚ÇÅ‚ÇÄ*w‚ÇÑ)
Dw = [ Dw‚ÇÅ ; Dw‚ÇÇ ;  Dw‚ÇÉ ; Dw‚ÇÑ ]
norm_y_poly = Polynomial( [ norm_y ]  , :r)
norm_y_plus_r‚ÇÅ = Polynomial( [ norm_y ; interval(1)/weight_x[16]]  , :r)
norm_y_plus_r‚ÇÇ = Polynomial( [ norm_y ; interval(1)/weight_x[17]]  , :r)

# i = 19
ŒîDF[ 19 , 15 ] = Polynomial( [ interval(0) ; norm_T/interval(2)/weight_x[21] ] , :r )
ŒîDF[ 19 , 21 ] = Polynomial( [ interval(0) ; norm_T/interval(2)/weight_x[15] ] , :r )
ŒîDF[ 19 , 11 ] = Polynomial( [ interval(0) ; ExactReal(2)*norm_h/ŒΩ_w/(ŒΩ_w -norm_y  ) ] , :r)
ŒîDF_‚ÇÅ‚Çâ_‚ÇÅ‚ÇÜ = Polynomial( [ interval(0) ;  ExactReal(8)*norm( w‚ÇÅ , ùëø_w )*norm_h/ŒΩ_w/(ŒΩ_w - norm_y )/log(ExactReal(10)*ŒΩ_w/(norm_y + ŒΩ_w ))  +  interval(4)/ŒΩ_w/weight_x[11]  ], :r) 
ŒîDF_‚ÇÅ‚Çâ_‚ÇÅ‚Çá = Polynomial( [ interval(0) ;  ExactReal(8)*norm( w‚ÇÅ , ùëø_w )*norm_h/ŒΩ_w/(ŒΩ_w - norm_y )/log(ExactReal(10)*ŒΩ_w/(norm_y + ŒΩ_w ))  +  interval(4)/ŒΩ_w/weight_x[11]  ], :r) 

# i = 20
ŒîDF[ 20 , 12 ] = Polynomial( [ interval(0) ; ExactReal(2)*norm_h/ŒΩ_w/(ŒΩ_w -norm_y  ) ] , :r)
ŒîDF_‚ÇÇ‚ÇÄ_‚ÇÅ‚ÇÜ = Polynomial( [ interval(0) ;  ExactReal(8)*norm( w‚ÇÇ , ùëø_w )*norm_h/ŒΩ_w/(ŒΩ_w - norm_y )/log(ExactReal(10)*ŒΩ_w/(norm_y + ŒΩ_w ))  +  interval(4)/ŒΩ_w/weight_x[12]  ], :r) 
ŒîDF_‚ÇÇ‚ÇÄ_‚ÇÅ‚Çá = Polynomial( [ interval(0) ;  ExactReal(8)*norm( w‚ÇÇ , ùëø_w )*norm_h/ŒΩ_w/(ŒΩ_w - norm_y )/log(ExactReal(10)*ŒΩ_w/(norm_y + ŒΩ_w ))  +  interval(4)/ŒΩ_w/weight_x[12]  ], :r) 

# i = 21
ŒîDF[ 21 , 15 ] = Polynomial( [ interval(0) ; norm_T/interval(2)/weight_x[23] ] , :r )
ŒîDF[ 21 , 23 ] = Polynomial( [ interval(0) ; norm_T/interval(2)/weight_x[15] ] , :r )
ŒîDF[ 21 , 13 ] = Polynomial( [ interval(0) ; ExactReal(2)*norm_h/ŒΩ_w/(ŒΩ_w -norm_y  ) ] , :r)
ŒîDF_‚ÇÇ‚ÇÅ_‚ÇÅ‚ÇÜ = Polynomial( [ interval(0) ;  ExactReal(8)*norm( w‚ÇÉ , ùëø_w )*norm_h/ŒΩ_w/(ŒΩ_w - norm_y )/log(ExactReal(10)*ŒΩ_w/(norm_y + ŒΩ_w ))  +  interval(4)/ŒΩ_w/weight_x[13]  ], :r) 
ŒîDF_‚ÇÇ‚ÇÅ_‚ÇÅ‚Çá = Polynomial( [ interval(0) ;  ExactReal(8)*norm( w‚ÇÉ , ùëø_w )*norm_h/ŒΩ_w/(ŒΩ_w - norm_y )/log(ExactReal(10)*ŒΩ_w/(norm_y + ŒΩ_w ))  +  interval(4)/ŒΩ_w/weight_x[13]  ], :r) 

# i = 22
ŒîDF[ 22 , 14 ] = Polynomial( [ interval(0) ; ExactReal(2)*norm_h/ŒΩ_w/(ŒΩ_w -norm_y  ) ] , :r)
ŒîDF_‚ÇÇ‚ÇÇ_‚ÇÅ‚ÇÜ = Polynomial( [ interval(0) ;  ExactReal(8)*norm( w‚ÇÑ , ùëø_w )*norm_h/ŒΩ_w/(ŒΩ_w - norm_y )/log(ExactReal(10)*ŒΩ_w/(norm_y + ŒΩ_w ))  +  interval(4)/ŒΩ_w/weight_x[14]  ], :r) 
ŒîDF_‚ÇÇ‚ÇÇ_‚ÇÅ‚Çá = Polynomial( [ interval(0) ;  ExactReal(8)*norm( w‚ÇÑ , ùëø_w )*norm_h/ŒΩ_w/(ŒΩ_w - norm_y )/log(ExactReal(10)*ŒΩ_w/(norm_y + ŒΩ_w ))  +  interval(4)/ŒΩ_w/weight_x[14]  ], :r) 

# i = 23
ŒîDF[ 23 , 18 ] = Polynomial( [interval(0) ; interval(2)/weight_x[18]  ] ,:r)
ŒîDF[ 23 , 19 ] = Polynomial( [interval(0) ; interval(2)/weight_x[19]  ] ,:r)
# i = 24
ŒîDF[ 24 , 16 ] = Polynomial( [interval(0) ; interval(2)/weight_x[16]  ] ,:r)
ŒîDF[ 24 , 17 ] = Polynomial( [interval(0) ; interval(2)/weight_x[17]  ] ,:r)
# i = 25
ŒîDF‚ÇÇ‚ÇÖ = Matrix{Any}(undef, 10 , 29)
ŒîDF‚ÇÇ‚ÇÖ .= Polynomial( interval(0) , :r)

ŒîDF‚ÇÇ‚ÇÖ[2,1] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)
ŒîDF‚ÇÇ‚ÇÖ[2,2] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)

ŒîDF‚ÇÇ‚ÇÖ[3,1] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)
ŒîDF‚ÇÇ‚ÇÖ[3,3] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)

ŒîDF‚ÇÇ‚ÇÖ[4,1] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)
ŒîDF‚ÇÇ‚ÇÖ[4,4] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)

ŒîDF‚ÇÇ‚ÇÖ[5,1] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)
ŒîDF‚ÇÇ‚ÇÖ[5,5] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)

ŒîDF‚ÇÇ‚ÇÖ[7,6] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)
ŒîDF‚ÇÇ‚ÇÖ[7,7] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)

ŒîDF‚ÇÇ‚ÇÖ[8,6] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)
ŒîDF‚ÇÇ‚ÇÖ[8,8] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)

ŒîDF‚ÇÇ‚ÇÖ[9,6] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)
ŒîDF‚ÇÇ‚ÇÖ[9,9] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)

ŒîDF‚ÇÇ‚ÇÖ[10,6] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)
ŒîDF‚ÇÇ‚ÇÖ[10,10] = Polynomial( [interval(0) , interval(1)/weight_x[25] ]  , :r)

for ‚Ñì in axes(M‚ÇÅ,3)
    if size(M‚ÇÅ,1) >= 2 
        if ‚Ñì >= 2
            ŒîDF‚ÇÇ‚ÇÖ[3,1] = ŒîDF‚ÇÇ‚ÇÖ[3,1]+ abs.(M‚ÇÅ_int)[2,1,‚Ñì]*interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÖ_‚ÇÇ  
            ŒîDF‚ÇÇ‚ÇÖ[8,1] = ŒîDF‚ÇÇ‚ÇÖ[8,1]+ abs.(M‚ÇÅ_int)[2,1,‚Ñì]*interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÖ_‚Çá 
        end
        ŒîDF‚ÇÇ‚ÇÖ[3,2] = ŒîDF‚ÇÇ‚ÇÖ[3,2]+ abs.(M‚ÇÅ_int)[2,1,‚Ñì]*c‚ÇÅ^(‚Ñì-1)
        ŒîDF‚ÇÇ‚ÇÖ[8,7] = ŒîDF‚ÇÇ‚ÇÖ[8,7]+ abs.(M‚ÇÅ_int)[2,1,‚Ñì]*c‚ÇÅ^(‚Ñì-1)
    end
    if size(M‚ÇÅ,2) >= 2 
        if ‚Ñì >= 2
            ŒîDF‚ÇÇ‚ÇÖ[3,1] = ŒîDF‚ÇÇ‚ÇÖ[3,1]+ abs.(M‚ÇÅ_int)[1,2,‚Ñì]*interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÖ_‚ÇÑ  
            ŒîDF‚ÇÇ‚ÇÖ[8,1] = ŒîDF‚ÇÇ‚ÇÖ[8,1]+ abs.(M‚ÇÅ_int)[1,2,‚Ñì]*interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÖ_‚Çá  
        end
        ŒîDF‚ÇÇ‚ÇÖ[3,4] = ŒîDF‚ÇÇ‚ÇÖ[3,4]+ abs.(M‚ÇÅ_int)[1,2,‚Ñì]*c‚ÇÅ^(‚Ñì-1)
        ŒîDF‚ÇÇ‚ÇÖ[8,9] = ŒîDF‚ÇÇ‚ÇÖ[8,9]+ abs.(M‚ÇÅ_int)[1,2,‚Ñì]*c‚ÇÅ^(‚Ñì-1)
    end
end
for ‚Ñì in axes(M‚ÇÇ,3)
    if size(M‚ÇÇ,1) >= 2 
        if ‚Ñì >= 2
            ŒîDF‚ÇÇ‚ÇÖ[5,1] = ŒîDF‚ÇÇ‚ÇÖ[5,1] + abs.(M‚ÇÇ_int)[2,1,‚Ñì]*interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÖ_‚ÇÇ 
            ŒîDF‚ÇÇ‚ÇÖ[10,1] = ŒîDF‚ÇÇ‚ÇÖ[10,1] + abs.(M‚ÇÇ_int)[2,1,‚Ñì]*interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÖ_‚Çâ   
        end
        ŒîDF‚ÇÇ‚ÇÖ[5,2] = ŒîDF‚ÇÇ‚ÇÖ[5,2]+ abs.(M‚ÇÇ_int)[2,1,‚Ñì]*c‚ÇÅ^(‚Ñì-1)
        ŒîDF‚ÇÇ‚ÇÖ[10,7] = ŒîDF‚ÇÇ‚ÇÖ[5,2]+ abs.(M‚ÇÇ_int)[2,1,‚Ñì]*c‚ÇÅ^(‚Ñì-1)
    end
    if size(M‚ÇÇ,2) >= 2 && ‚Ñì >= 2
        if ‚Ñì >= 2
            ŒîDF‚ÇÇ‚ÇÖ[5,1] = ŒîDF‚ÇÇ‚ÇÖ[5,1] + abs.(M‚ÇÇ_int)[1,2,‚Ñì]*interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÖ_‚ÇÑ  
            ŒîDF‚ÇÇ‚ÇÖ[10,1] = ŒîDF‚ÇÇ‚ÇÖ[10,1] + abs.(M‚ÇÇ_int)[1,2,‚Ñì]*interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÖ_‚Çâ  
        end
        ŒîDF‚ÇÇ‚ÇÖ[5,4] = ŒîDF‚ÇÇ‚ÇÖ[5,4]+ abs.(M‚ÇÇ_int)[1,2,‚Ñì]*c‚ÇÅ^(‚Ñì-1)
        ŒîDF‚ÇÇ‚ÇÖ[10,9] = ŒîDF‚ÇÇ‚ÇÖ[10,9]+ abs.(M‚ÇÇ_int)[1,2,‚Ñì]*c‚ÇÅ^(‚Ñì-1)
    end
end
ŒîDF‚ÇÇ‚ÇÖ[3,1][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[3,2][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[3,4][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[5,1][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[5,2][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[5,4][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[8,1][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[8,7][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[8,9][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[10,1][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[10,7][0] = ExactReal(0)
ŒîDF‚ÇÇ‚ÇÖ[10,9][0] = ExactReal(0)

ŒîDF‚ÇÇ‚ÇÖ_temp = sum( ŒîDF‚ÇÇ‚ÇÖ[:,2:end] , dims = 2)
ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ =  ŒîDF‚ÇÇ‚ÇÖ[:,1] 

counter_order_poly_1 = [0;0]
counter_order_poly_2 = [0;0]
for i = 1:10
    local length_ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ = length(ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ[i][:]) 
    local length_ŒîDF‚ÇÇ‚ÇÖ_temp = length(ŒîDF‚ÇÇ‚ÇÖ_temp[i][:]) 
    if length_ŒîDF‚ÇÇ‚ÇÖ_temp > counter_order_poly_1[1]
        counter_order_poly_1[:] = [ length_ŒîDF‚ÇÇ‚ÇÖ_temp , i]
    end
    if length_ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ > counter_order_poly_2[1]
        counter_order_poly_2[:] = [ length_ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ , i]
    end
end


ŒîDF‚ÇÇ‚ÇÖ = copy( ŒîDF‚ÇÇ‚ÇÖ_temp[ counter_order_poly_1[2]  ] )
ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ_ = copy( ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ[ counter_order_poly_2[2]  ] )

for i = 1:10
    local length_ŒîDF‚ÇÇ‚ÇÖ_temp = length(ŒîDF‚ÇÇ‚ÇÖ_temp[i][:]) 
    if length_ŒîDF‚ÇÇ‚ÇÖ_temp > 0
        for j = 1:length_ŒîDF‚ÇÇ‚ÇÖ_temp
            ŒîDF‚ÇÇ‚ÇÖ[j] = maximum( [ŒîDF‚ÇÇ‚ÇÖ_temp[i][j] ; ŒîDF‚ÇÇ‚ÇÖ[j]] )
        end
    end
    local length_ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ = length(ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ[i][:]) 
    if length_ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ > 0
        for j = 1:length_ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ
            ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ_[j] = maximum( [ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ[i][j] ; ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ_[j]] )
        end
    end
end
ŒîDF[25 , 25] = ŒîDF‚ÇÇ‚ÇÖ
ŒîDF[25 , 1] = ŒîDF‚ÇÇ‚ÇÖ_‚ÇÅ_

vect_p = interval.([0;0;0;0]) 
vect_p‚Çô = interval.([0;0;0;0]) 
vect_p‚Çò = interval.([0;0;0;0]) 
for n = 1:4
    for i = 0:order(p_int)[n][1]
        for j = 0:order(p_int)[n][2]
            vect_p[n] = vect_p[n] +  interval(i) +  interval(j)
            vect_p‚Çô[n] = vect_p‚Çô[n] +  interval(i) 
            vect_p‚Çò[n] = vect_p‚Çò[n]  +  interval(j)
        end
    end
end
Œª‚ÇÅ‚ÇÅ = abs(eigenpairs_int[1])
Œª‚ÇÇ‚ÇÅ = abs(eigenpairs_int[6])

tails_p = interval(1)/minimum([ Œª‚ÇÅ‚ÇÅ^2 , Œª‚ÇÅ‚ÇÅ*Œª‚ÇÇ‚ÇÅ, Œª‚ÇÇ‚ÇÅ^2 ,  Œª‚ÇÇ‚ÇÅ^2 ])
# i = 26
ŒîDF[ 26 , 26 ] = Polynomial( [ interval(0) ;  ( vect_p[1] + tails_p ) / weight_x[25] ], :r)
ŒîDF[ 26 , 25 ] = Polynomial( [ interval(0) ;  max(vect_p‚Çô, vect_p‚Çò ) / weight_x[26] ], :r)
# i = 27
ŒîDF[ 27 , 27 ] = Polynomial( [ interval(0) ;  ( vect_p[2] + tails_p ) / weight_x[26] ], :r)
ŒîDF[ 27 , 25 ] = Polynomial( [ interval(0) ;  max(vect_p‚Çô, vect_p‚Çò ) / weight_x[27] ], :r)
# i = 28
ŒîDF[ 28 , 28 ] = Polynomial( [ interval(0) ;  ( vect_p[3] + tails_p ) / weight_x[25] ], :r)
ŒîDF[ 28 , 25 ] = Polynomial( [ interval(0) ;  max(vect_p‚Çô, vect_p‚Çò ) / weight_x[28] ], :r)
# i = 29
ŒîDF[ 29 , 29 ] = Polynomial( [ interval(0) ;  ( vect_p[4] + tails_p ) / weight_x[25] ], :r)
ŒîDF[ 29 , 25 ] = Polynomial( [ interval(0) ;  max(vect_p‚Çô, vect_p‚Çò ) / weight_x[29] ], :r)

# Da loops
for n  in axes(M‚ÇÅ ,1)
    for m in axes(M‚ÇÅ,2)
        for ‚Ñì in axes(M‚ÇÅ,3)
            if M‚ÇÅ[n,m,‚Ñì] != 0
                ŒîDF[ 3 , 24 ] = ŒîDF[ 3 , 24 ] + (c‚ÇÅ^(‚Ñì-1))*abs.(M‚ÇÅ_int)[n,m,‚Ñì]*(c‚ÇÇ^(n-1)*c‚ÇÑ^(m-1))
                ŒîDF[ 12 , 24 ] = ŒîDF[ 12 , 24 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì]*(c‚ÇÅ‚ÇÅ^(n-1)*c‚ÇÅ‚ÇÉ^(m-1))
                ŒîDF[ 20 , 15 ] = ŒîDF[ 20 , 15 ] + norm_T/interval(2)*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì]*(c‚ÇÇ‚ÇÄ^(n-1)*c‚ÇÇ‚ÇÇ^(m-1))
                if ‚Ñì >= 2
                    ŒîDF[ 3 , 1 ] = ŒîDF[ 3 , 1 ] + interval((‚Ñì-1))*(c‚ÇÅ^(‚Ñì-2))*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì]*(c‚ÇÇ^(n-1)*c‚ÇÑ^(m-1))
                    ŒîDF[ 12 , 1 ] = ŒîDF[ 12 , 1 ] + interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * c‚ÇÅ‚ÇÅ^(n-1)*c‚ÇÅ‚ÇÉ^(m-1)
                    ŒîDF[ 27 , 1 ] = ŒîDF[ 27 , 1 ] + interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * c‚ÇÇ‚ÇÜ^(n-1)*c‚ÇÇ‚Çà^(m-1)
                    ŒîDF[ 20 , 1 ] = ŒîDF[ 20 , 1 ] + interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * c‚ÇÇ‚ÇÄ^(n-1)*c‚ÇÇ‚ÇÇ^(m-1)*norm_T/interval(2)*c‚ÇÅ‚ÇÖ
                end
                if n >= 2
                    ŒîDF[ 3 , 2 ] = ŒîDF[ 3 , 2 ] + interval((n-1))*(c‚ÇÅ^(‚Ñì-1))*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì]*(c‚ÇÇ^(n-2)*c‚ÇÑ^(m-1))
                    ŒîDF[ 12 , 11 ] = ŒîDF[ 12 , 11 ] + c‚ÇÅ^(‚Ñì-1)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì]*interval(n-1)*(c‚ÇÅ‚ÇÅ^(n-2)*c‚ÇÅ‚ÇÉ^(m-1))
                    ŒîDF[ 27 , 26 ] = ŒîDF[ 27 , 26 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì]*interval(n-1)*(c‚ÇÇ‚ÇÜ^(n-2)*c‚ÇÇ‚Çà^(m-1))
                    ŒîDF[ 20 , 21 ] = ŒîDF[ 20 , 21 ] + interval(n-1)*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * c‚ÇÇ‚ÇÄ^(n-2)*c‚ÇÇ‚ÇÇ^(m-1)*norm_T/interval(2)*c‚ÇÅ‚ÇÖ
                end
                if m >= 2
                    ŒîDF[ 3 , 4 ] = ŒîDF[ 3 , 4 ] + interval((m-1))*(c‚ÇÅ^(‚Ñì-1))*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì]*(c‚ÇÇ^(n-1)*c‚ÇÑ^(m-2))
                    ŒîDF[ 12 , 13 ] = ŒîDF[ 12 , 13 ] + c‚ÇÅ^(‚Ñì-1)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì]*interval(m-1)*(c‚ÇÅ‚ÇÅ^(n-1)*c‚ÇÅ‚ÇÉ^(m-2))
                    ŒîDF[ 27 , 28 ] = ŒîDF[ 27 , 28 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì]*interval(m-1)*(c‚ÇÇ‚ÇÜ^(n-1)*c‚ÇÇ‚Çà^(m-2))
                    ŒîDF[ 20 , 23 ] = ŒîDF[ 20 , 23 ] + interval(m-1)*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * c‚ÇÇ‚ÇÄ^(n-1)*c‚ÇÇ‚ÇÇ^(m-2)*norm_T/interval(2)*c‚ÇÅ‚ÇÖ
                end
                if n-2 >= 0
                    ŒîDF[ 8 , 7 ] = ŒîDF[ 8 , 7 ]  + c‚ÇÅ^(‚Ñì-1)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-1) 
                end
                if m-2 >= 0
                    ŒîDF[ 8 , 9 ] = ŒîDF[ 8 , 9 ]  + c‚ÇÅ^(‚Ñì-1)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * interval(m-1)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-2) 
                end
                if n-2 >= 0 && m-2>= 0
                    ŒîDF[ 8 , 24 ] = ŒîDF[ 8 , 24 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * (interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-1)*c‚Çá + interval(m-1)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-2)*c‚Çâ)
                elseif n-2 >= 0
                    ŒîDF[ 8 , 24 ] = ŒîDF[ 8 , 24 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-1)*c‚Çá  
                elseif m-2 >= 0
                    ŒîDF[ 8 , 24 ] = ŒîDF[ 8 , 24 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * interval(m-1)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-2)*c‚Çá  
                end
                if n-3 >= 0 
                    ŒîDF[ 8 , 2 ] = ŒîDF[ 8 , 2 ]  + c‚ÇÇ‚ÇÑ*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * interval(n-1)*interval(n-2)*c‚ÇÇ_ext^(n-3)*c‚ÇÑ_ext^(m-1)*c‚Çá 
                end
                if n-2 >= 0 && m-2 >= 0
                    ŒîDF[ 8 , 2 ] = ŒîDF[ 8 , 2 ]  + c‚ÇÇ‚ÇÑ*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * interval(m-1)*interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-2)*c‚Çâ 
                    ŒîDF[ 8 , 4 ] = ŒîDF[ 8 , 4 ]  + c‚ÇÇ‚ÇÑ*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * interval(m-1)*interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-2)*c‚Çá 
                end
                if m-3 >=0
                    ŒîDF[ 8 , 4 ] = ŒîDF[ 8 , 4 ]  + c‚ÇÇ‚ÇÑ*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * interval(m-1)*(m-2)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-3)*c‚Çâ 
                end
                if n-2 >= 0 && m-2>= 0 && ‚Ñì >= 2
                    ŒîDF[ 8 , 1 ] = ŒîDF[ 8 , 1 ] + ExactReal(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * (interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-1)*c‚Çá + interval(m-1)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-2)*c‚Çâ )
                elseif n-2 >= 0 && ‚Ñì >= 2
                    ŒîDF[ 8 , 1 ] = ŒîDF[ 8 , 1 ] + ExactReal(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-1)*c‚Çá 
                elseif m-2 >= 0  && ‚Ñì >= 2
                    ŒîDF[ 8 , 1 ] = ŒîDF[ 8 , 1 ] + ExactReal(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÅ_int)[n,m,‚Ñì] * interval(m-1)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-2)*c‚Çâ  
                end
            end
        end
    end
end
for n  in axes(M‚ÇÇ ,1)
    for m in axes(M‚ÇÇ,2)
        for ‚Ñì in axes(M‚ÇÇ,3)
            if M‚ÇÇ[n,m,‚Ñì] != 0
                ŒîDF[ 5 , 24 ] = ŒîDF[ 5 , 24 ] + (c‚ÇÅ^(‚Ñì-1))*abs.(M‚ÇÇ_int)[n,m,‚Ñì]*(c‚ÇÇ^(n-1)*c‚ÇÑ^(m-1))
                ŒîDF[ 14 , 24 ] = ŒîDF[ 14 , 24 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì]*(c‚ÇÅ‚ÇÅ^(n-1)*c‚ÇÅ‚ÇÉ^(m-1))
                ŒîDF[ 22 , 15 ] = ŒîDF[ 22 , 15 ] + norm_T/interval(2)*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì]*(c‚ÇÇ‚ÇÄ^(n-1)*c‚ÇÇ‚ÇÇ^(m-1))
                if ‚Ñì >= 2
                    ŒîDF[ 5 , 1 ] = ŒîDF[ 5 , 1 ] + interval((‚Ñì-1))*(c‚ÇÅ^(‚Ñì-2))*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì]*(c‚ÇÇ^(n-1)*c‚ÇÑ^(m-1))
                    ŒîDF[ 14 , 1 ] = ŒîDF[ 14 , 1 ] + ExactReal(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * c‚ÇÅ‚ÇÅ^(n-1)*c‚ÇÅ‚ÇÉ^(m-1)
                    ŒîDF[ 29 , 1 ] = ŒîDF[ 29 , 1 ] + interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * c‚ÇÇ‚ÇÜ^(n-1)*c‚ÇÇ‚Çà^(m-1)
                    ŒîDF[ 22 , 1 ] = ŒîDF[ 22 , 1 ] + interval(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * c‚ÇÇ‚ÇÄ^(n-1)*c‚ÇÇ‚ÇÇ^(m-1)*norm_T/interval(2)*c‚ÇÅ‚ÇÖ
                end
                if n >= 2
                    ŒîDF[ 5 , 2 ] = ŒîDF[ 5 , 2 ] + interval((n-1))*(c‚ÇÅ^(‚Ñì-1))*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì]*(c‚ÇÇ^(n-2)*c‚ÇÑ^(m-1))
                    ŒîDF[ 14 , 11 ] = ŒîDF[ 14 , 11 ] + c‚ÇÅ^(‚Ñì-1)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì]*interval(n-1)*(c‚ÇÅ‚ÇÅ^(n-2)*c‚ÇÅ‚ÇÉ^(m-1))
                    ŒîDF[ 29 , 26 ] = ŒîDF[ 29 , 26 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì]*interval(n-1)*(c‚ÇÇ‚ÇÜ^(n-2)*c‚ÇÇ‚Çà^(m-1))
                    ŒîDF[ 22 , 21 ] = ŒîDF[ 22 , 21 ] + interval(n-1)*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * c‚ÇÇ‚ÇÄ^(n-2)*c‚ÇÇ‚ÇÇ^(m-1)*norm_T/interval(2)*c‚ÇÅ‚ÇÖ
                end
                if m >= 2
                    ŒîDF[ 5 , 4 ] = ŒîDF[ 5 , 4 ] + interval((m-1))*(c‚ÇÅ^(‚Ñì-1))*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì]*(c‚ÇÇ^(n-1)*c‚ÇÑ^(m-2))
                    ŒîDF[ 14 , 13 ] = ŒîDF[ 12 , 13 ] + c‚ÇÅ^(‚Ñì-1)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì]*interval(m-1)*(c‚ÇÅ‚ÇÅ^(n-1)*c‚ÇÅ‚ÇÉ^(m-2))
                    ŒîDF[ 29 , 28 ] = ŒîDF[ 29 , 28 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì]*interval(m-1)*(c‚ÇÇ‚ÇÜ^(n-1)*c‚ÇÇ‚Çà^(m-2))
                    ŒîDF[ 22 , 23 ] = ŒîDF[ 22 , 23 ] + interval(m-1)*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * c‚ÇÇ‚ÇÄ^(n-1)*c‚ÇÇ‚ÇÇ^(m-2)*norm_T/interval(2)*c‚ÇÅ‚ÇÖ
                end
                if n-2 >= 0
                    ŒîDF[ 10 , 7 ] = ŒîDF[ 10 , 7 ]  + c‚ÇÅ^(‚Ñì-1)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-1) 
                end
                if m-2 >= 0
                    ŒîDF[ 10 , 9 ] = ŒîDF[ 10 , 9 ]  + c‚ÇÅ^(‚Ñì-1)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * interval(m-1)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-2) 
                end
                if n-2 >= 0 && m-2>= 0
                    ŒîDF[ 10 , 24 ] = ŒîDF[ 10 , 24 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * (interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-1)*c‚Çá + (m-1)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-2)*c‚Çâ)
                elseif n-2 >= 0
                    ŒîDF[ 10 , 24 ] = ŒîDF[ 10 , 24 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-1)*c‚Çá
                elseif m-2 >= 0
                    ŒîDF[ 10 , 24 ] = ŒîDF[ 10 , 24 ] + c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * interval(m-1)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-2)*c‚Çá
                end
                if n-3 >= 0 
                    ŒîDF[ 10 , 2 ] = ŒîDF[ 10 , 2 ]  + c‚ÇÇ‚ÇÑ*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * interval(n-1)*interval(n-2)*c‚ÇÇ_ext^(n-3)*c‚ÇÑ_ext^(m-1)*c‚Çá 
                end
                if n-2 >= 0 && m-2 >= 0
                    ŒîDF[ 10 , 2 ] = ŒîDF[ 10 , 2 ]  + c‚ÇÇ‚ÇÑ*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * interval(m-1)*interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-2)*c‚Çâ 
                    ŒîDF[ 10 , 4 ] = ŒîDF[ 10 , 4 ]  + c‚ÇÇ‚ÇÑ*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * interval(m-1)*interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-2)*c‚Çá 
                end
                if m-3 >=0
                    ŒîDF[ 10 , 4 ] = ŒîDF[ 10 , 4 ]  + c‚ÇÇ‚ÇÑ*c‚ÇÅ^(‚Ñì-1)*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * interval(m-1)*interval(m-2)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-3)*c‚Çâ 
                end
                if n-2 >= 0 && m-2>= 0 && ‚Ñì >= 2
                    ŒîDF[ 10 , 1 ] = ŒîDF[ 10 , 1 ] + ExactReal(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * (interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-1)*c‚Çá + interval(m-1)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-2)*c‚Çâ )
                elseif n-2 >= 0 && ‚Ñì >= 2
                    ŒîDF[ 10 , 1 ] = ŒîDF[ 10 , 1 ] + ExactReal(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * interval(n-1)*c‚ÇÇ_ext^(n-2)*c‚ÇÑ_ext^(m-1)*c‚Çá 
                elseif m-2 >= 0  && ‚Ñì >= 2
                    ŒîDF[ 10 , 1 ] = ŒîDF[ 10 , 1 ] + ExactReal(‚Ñì-1)*c‚ÇÅ^(‚Ñì-2)*c‚ÇÇ‚ÇÑ*abs.(M‚ÇÇ_int)[n,m,‚Ñì] * interval(m-1)*c‚ÇÇ_ext^(n-1)*c‚ÇÑ_ext^(m-2)*c‚Çâ 
                end
            end
        end
    end
end
w_vect = Vector{Any}(undef , 4)
for n = 1:4
    w_vect[n] =  zeros(eltype(w_int), space(w)[n])
    for i = -order(w)[n][1]:order(w)[n][1]
        for j = 2:order(w)[n][2]
            w_vect[n][(i,j)] = interval(j) / ŒΩ_w^(abs(interval(i)) + interval(j))
        end
    end
end
B = Matrix{Any}(undef,29,29)
for i = 1:29
    for j = 1:29
        for k = 1:29
            if isassigned(B,i,j)
                B[i,j] = B[i,j] + A_[i,k]*ŒîDF[k,j]
            else
                B[i,j] =  A_[i,k]*ŒîDF[k,j]
            end
        end
    end
end

for i = 1:29
    if i in [1;6;15;16;17;18;19;24;25]
        local space_test_in = ‚Ñì‚àû()
    elseif i in [ 2 ;3;4;5]
        local space_test_in =  ‚Ñì¬π(GeometricWeight(ŒΩ·µß))
    elseif i in [ 7;8;9;10]
        local space_test_in =  ‚Ñì¬π(GeometricWeight(ŒΩ·µ•))
    elseif i in [ 11;12;13;14]
        local space_test_in =  ‚Ñì¬π(GeometricWeight(ŒΩ_w))
    elseif i in [ 20;21;22;23]
        local space_test_in =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çê))
    elseif i in [ 26;27;28;29]
        local space_test_in =  ‚Ñì¬π(GeometricWeight(ŒΩ‚Çö))
    end
    for n = 1:4
        temp_B = norm( Sequence( space_X[i] ,  norm.( A·µ¢‚±º_cheb[i,10+n] , 1 )*w_vect[n][:]) , space_test_in )
        if i == 10+n
            temp_B = max( temp_B , norm( interval(1) / Œª_cheb[1](interval( -1,1 )) ,1) ) 
        end
        B[i,6] = B[i,6] + Polynomial( [ interval(0) , temp_B/weight_x[10+n] ]  ,:r) 
        B[i,10+n] = B[i,10+n] + Polynomial( [ interval(0) , temp_B/weight_x[6] ]  ,:r) 
    end
    A·µ¢‚ÇÅ‚Çâ_cheb = norm( Sequence( space_X[i] , norm.( A·µ¢‚±º_cheb[i,19] , 1 )[:,1] ) , space_test_in ) 
    A·µ¢‚ÇÇ‚ÇÄ_cheb = norm( Sequence( space_X[i] , norm.( A·µ¢‚±º_cheb[i,20] , 1 )[:,1] ) , space_test_in ) 
    A·µ¢‚ÇÇ‚ÇÅ_cheb = norm( Sequence( space_X[i] , norm.( A·µ¢‚±º_cheb[i,21] , 1 )[:,1] ) , space_test_in ) 
    A·µ¢‚ÇÇ‚ÇÇ_cheb = norm( Sequence( space_X[i] , norm.( A·µ¢‚±º_cheb[i,22] , 1 )[:,1] ) , space_test_in ) 
    B[i,16] = B[i,17] + A·µ¢‚ÇÅ‚Çâ_cheb *ŒîDF_‚ÇÅ‚Çâ_‚ÇÅ‚ÇÜ + A·µ¢‚ÇÇ‚ÇÄ_cheb *ŒîDF_‚ÇÇ‚ÇÄ_‚ÇÅ‚ÇÜ + A·µ¢‚ÇÇ‚ÇÅ_cheb *ŒîDF_‚ÇÇ‚ÇÅ_‚ÇÅ‚ÇÜ + A·µ¢‚ÇÇ‚ÇÇ_cheb *ŒîDF_‚ÇÇ‚ÇÇ_‚ÇÅ‚ÇÜ
    B[i,17] = B[i,17] + A·µ¢‚ÇÅ‚Çâ_cheb *ŒîDF_‚ÇÅ‚Çâ_‚ÇÅ‚Çá + A·µ¢‚ÇÇ‚ÇÄ_cheb *ŒîDF_‚ÇÇ‚ÇÄ_‚ÇÅ‚Çá + A·µ¢‚ÇÇ‚ÇÅ_cheb *ŒîDF_‚ÇÇ‚ÇÅ_‚ÇÅ‚Çá + A·µ¢‚ÇÇ‚ÇÇ_cheb *ŒîDF_‚ÇÇ‚ÇÇ_‚ÇÅ‚Çá 
end

Z‚ÇÇr_temp = sum( B .* (weight_x*transpose( interval(1) ./ weight_x )) ,dims = 2)
for i =1:29
    Z‚ÇÇr_temp[i][0] =ExactReal( 0 )
end

counter_order_poly = [0;0]
for i = 1:29
    local length_Z‚ÇÇr‚Å± = length(Z‚ÇÇr_temp[i][:]) 
    if length_Z‚ÇÇr‚Å± > counter_order_poly[1]
        counter_order_poly[:] = [ length_Z‚ÇÇr‚Å± , i]
    end
end

Z‚ÇÇr = copy( Z‚ÇÇr_temp[ counter_order_poly[2]  ] )
for i = 1:29
    local length_Z‚ÇÇr‚Å± = length(Z‚ÇÇr_temp[i][:]) 
    if length_Z‚ÇÇr‚Å± > 0
        for j = 1:length_Z‚ÇÇr‚Å±
            Z‚ÇÇr[j] = maximum( [Z‚ÇÇr_temp[i][j] ; Z‚ÇÇr[j]] )
        end
    end
end
printstyled("‚ú∂ Z‚ÇÇ = $(Polynomial( sup.(Z‚ÇÇr[1:end]) ,:r ))\n"; color = :green)
# =========================================================================
#  Radii Polynomial
# ========================================================================= 
printstyled("============================================================\n"; color = :blue)
printstyled("5. Roots of Radii Polynomial\n"; color = :blue)
printstyled("============================================================\n"; color = :blue)

poly_int =  Z‚ÇÇr*Polynomial( [interval(0), interval(1)] ,:r ) + Polynomial( [ Y‚ÇÄ , -( 1 - Z‚ÇÅ - Z‚ÇÄ) ] ,:r )

poly = Polynomial( sup.(poly_int[:]) )
rootsy = roots(poly)
root_all = [0.0;0.0]
counter = 1
r_star = min( (ŒΩ‚Çö - norm_z)/(norm_t*interval(10))  , (ŒΩ_w - norm_y)/(norm_h*interval(10))  )
for i in axes(rootsy,1)
    if imag(rootsy[i]) == 0 && real(rootsy[i]) > 0
        root_all[counter] =  real(rootsy[i])
        counter = counter + 1
    end
end
if isempty(root_all)
    error("Proof did not work no real positive roots")
elseif root_all[1] > inf(r_star)
    error(string("Smallest positive root is bigger than r_star =$(inf(r_star) ) "))
else
    printstyled("‚ú∂ r_min = $(root_all[1])\n"; color = :green)
    printstyled("‚ú∂ r_max = $(root_all[2])\n"; color = :green)
end
Y‚ÇÄ = sup(Y‚ÇÄ);
Z‚ÇÄ = sup(Z‚ÇÄ);
Z‚ÇÅ = sup(Z‚ÇÅ);
printstyled("============================================================\n"; color = :blue)
printstyled("Proof Complete\n"; color = :blue)
printstyled("============================================================\n"; color = :blue)

    return X_cheb , Œ∑_cheb, X_grid , Œ∑_grid, N, Œ∫ , Œæ‚ÇÅ·µè, Œæ‚ÇÇ·µè, star, length·µ•, M‚ÇÅ, M‚ÇÇ , Y‚ÇÄ , Z‚ÇÄ, Z‚ÇÅ , Z‚ÇÇr , root_all , ŒΩ·µß, ŒΩ·µ• , ŒΩ‚Çê , ŒΩ_w ,  ŒΩ‚Çö , weight_x
end
#  dir_name = joinpath(@__DIR__, "Data", "GS Orientable", "PROVEN","Data_GS_snaking_proof_")
# jldsave(dir_name*"14.jld2"; X_cheb , Œ∑_cheb, X_grid , Œ∑_grid, N, Œ∫ , Œæ‚ÇÅ·µè, Œæ‚ÇÇ·µè, star, length·µ•, M‚ÇÅ, M‚ÇÇ , Y‚ÇÄ , Z‚ÇÄ, Z‚ÇÅ , Z‚ÇÇr , root_all , ŒΩ·µß, ŒΩ·µ• , ŒΩ‚Çê , ŒΩ_w ,  ŒΩ‚Çö , weight_x)
# Need to redo 1-7


